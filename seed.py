import sys
import os
from datetime import datetime
from sqlalchemy.exc import IntegrityError

# Agregar 'src' al path para importar bien
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from app import create_app
from api.models import (
    db, Users, Champions, Items, Stats, Builds, Builditems, Favourites,
    enumGender, enumRank, enumLane
)

app = create_app()

with app.app_context():
    try:
        # Limpiar datos previos
        for tbl in (Favourites, Builditems, Builds, Items, Champions, Stats, Users):
            db.session.query(tbl).delete()
        db.session.commit()

        users = [
            Users(username=f"user{i}", nick=f"Nick{i}", gender=enumGender.Male if i % 2 == 0 else enumGender.Female,
                  rank=enumRank.Diamond if i < 5 else enumRank.Master, mainrole=list(enumLane)[i % len(enumLane)])
            for i in range(20)
        ]
        db.session.add_all(users)
        db.session.flush()

        # Campeones + stats base
        champ_data = [
            ("Ahri", enumLane.Mid, "Mage", 53, 0, 570, 7, 400, 12, 0.625, 0, 0, 20, 30, 0, 0, 0, 0, 330),
            ("Olaf", enumLane.Jungle, "Fighter", 60, 0, 620, 8, 300, 10, 0.67, 0, 0, 25, 32, 0,0,0,0,350),
            ("Ashe", enumLane.ADCarry, "Marksman", 59,0,550,6,280,9,0.658,0,0,24,30,0,0,0,0,330),
            ("Leona", enumLane.Support, "Tank", 64,0,600,8,300,8,0.7,0,0,25,30,0,0,0,0,325),
            ("Darius", enumLane.Top, "Fighter", 64,0,620,8,0,10,0.638,0,0,36,32,0,0,0,0,340),
        ]
        champs = []
        for name, lane, typ, *stats_vals in champ_data:
            s = Stats(*stats_vals)
            db.session.add(s); db.session.flush()
            c = Champions(name=name, lane=lane, type=typ, media=f"{name.lower()}.png", stat=s)
            champs.append(c)
        db.session.add_all(champs)
        db.session.flush()

        # Items + stats
        item_data = [
            ("Blade of the Ruined King", 3200, 40, 0, 0.2, 10, 0),
            ("Rabadon's Deathcap", 3600, 0, 120, 0, 0, 0),
            ("Infinity Edge", 3400, 70, 0, 0, 0, 20),
            ("Thornmail", 2700, 0,0,0,0,0),
            ("Luden's Tempest", 3000, 0,80,0,0,0),
        ]
        items = []
        for name, price, ad, ap, atspd, lifesteal, spellvamp in item_data:
            s = Stats(ad=ad, ap=ap, hp=0, hpreg=0, mana=0, manareg=0,
                      atspeed=atspd, lifesteal=lifesteal, spellvamp=spellvamp,
                      crit=0, cd=0, armor=0, mresist=0, armorpen=0, magicpen=0,
                      lethal=0, mvspeed=0)
            db.session.add(s); db.session.flush()
            it = Items(name=name, price=price, stats_id=s.id,
                       description=f"Autogenerated description {name}",
                       media=f"{name.replace(' ', '').lower()}.png")
            items.append(it)
        db.session.add_all(items)
        db.session.flush()

        # Builds: 20 builds cycling through champs and users
        builds = []
        for i in range(20):
            u = users[i % len(users)]
            c = champs[i % len(champs)]
            b = Builds(
                title=f"Build {c.name} #{i}",
                description=f"Seed build {i} for {c.name}",
                champion=c, user=u,
                creation_date=datetime.utcnow()
            )
            builds.append(b)
        db.session.add_all(builds)
        db.session.flush()

        # Builditems: assign first item to each build
        builditems = [
            Builditems(build=b, item=items[i % len(items)], item_position=1)
            for i, b in enumerate(builds)
        ]
        db.session.add_all(builditems)
        db.session.flush()

        # Favourites: each user favorites next two builds
        favourites = []
        for i, u in enumerate(users):
            b1 = builds[(i + 1) % len(builds)]
            b2 = builds[(i + 2) % len(builds)]
            favourites.extend([Favourites(user=u, build=b1), Favourites(user=u, build=b2)])
        db.session.add_all(favourites)
        db.session.commit()

        print("✅ Seed completado correctamente.")
        print(f"- Users: {len(users)}")
        print(f"- Champions: {len(champs)}")
        print(f"- Items: {len(items)}")
        print(f"- Builds: {len(builds)}")
        print(f"- Builditems: {len(builditems)}")
        print(f"- Favourites: {len(favourites)}")

    except IntegrityError as e:
        db.session.rollback()
        print("❌ Error en seed:", e)